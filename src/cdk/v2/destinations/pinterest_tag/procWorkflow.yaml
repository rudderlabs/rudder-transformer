bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./utils
  - path: ./config
  - name: removeUndefinedValues
    path: ../../../../v0/util
  - name: removeUndefinedAndNullAndEmptyValues
    path: ../../../../v0/util
  - name: validateEventName
    path: ../../../../v0/util
  - path: '@rudderstack/integrations-lib'

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message
    onComplete: return
  - name: messageType
    template: |
      .message.type.toLowerCase()
  - name: apiVersion
    template: |
      .destination.Config.apiVersion ?? {{$.API_VERSION.v3}}
  - name: validateInput
    template: |
      let messageType = $.outputs.messageType;
      $.outputs.apiVersion === {{$.API_VERSION.v3}} ? 
      $.assertConfig(.destination.Config.advertiserId, "Advertiser Id not found. Aborting") : 
      ($.assertConfig(.destination.Config.adAccountId, "Ad Account ID not found. Aborting");
      $.assertConfig(.destination.Config.conversionToken, "Conversion Token not found. Aborting"));
      $.assert(messageType, "Message type is not present. Aborting message.");
      $.assert(messageType in {{$.EventType.([.TRACK, .PAGE, .SCREEN])}}, 
        "message type " + messageType + " is not supported")

  - name: validateInputForTrack
    description: Additional validation for Track events
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    template: |
      $.assert(.message.event || .message.name, "event_name could not be mapped. Aborting.")
  - name: commonFields
    description: |
      Builds common fields in destination payload.
      ref: https://s.pinimg.com/ct/docs/conversions_api/dist/v3.html
    template: |
      let commonFields = .message.().({
        "event_time": $.toSeconds({{{{$.getGenericPaths("timestamp")}}}}),
        "event_source_url": {{{{$.getGenericPaths("pageUrl")}}}} || undefined,
        "action_source": .traits.action_source ?? 
                         .context.traits.action_source ?? 
                         .traits.actionSource ??
                         .context.traits.actionSource ??
                         .properties.action_source ??
                         .properties.actionSource ??
                         .channel,
        "app_name": .properties.appName ?? .context.app.name,
        "app_version" : .properties.appVersion ?? .context.app.version,
        "device_brand": .properties.manufacturer ?? .context.device.manufacturer,
        "device_model": .properties.deviceModel ?? .context.device.model,
        "device_type": .properties.deviceType ?? .context.device.type,
        "os_version": .context.os.version || undefined,
        "language": .properties.language ??
                    .context.traits.language ??
                    .context.locale,
        "opt_out": .context.device.adTrackingEnabled !== undefined ? !.context.device.adTrackingEnabled,
        "event_id": $.getOneByPaths(., ^.destination.Config.deduplicationKey) ?? .messageId,
        "app_id": ^.destination.Config.appId,
        "advertiser_id": ^.destination.Config.advertiserId,
        "partner_name": .properties.partnerName ? $.convertToString(.properties.partnerName) : undefined,
        "device_carrier": .properties.partnerName ? $.convertToString(.context.network.carrier) : undefined,
        "wifi": .context.network.wifi ? Boolean(.context.network.wifi) : undefined
      });
      $.outputs.apiVersion === {{$.API_VERSION.v5}} ?  commonFields = commonFields{~["advertiser_id"]};
      $.removeUndefinedValues(commonFields)

  - name: validateCommonFields
    template: |
      const evenTime = $.outputs.commonFields.event_time;
      const actionSource = $.outputs.commonFields.action_source;
      $.assert(evenTime, "event_time is required");
      $.assert(actionSource, "action_source is required");
      $.assert(actionSource in {{$.VALID_ACTION_SOURCES}}, 
          {{"Action source must be one of " + $.VALID_ACTION_SOURCES.join(", ")}})
  - name: userFields
    description: Personally identifiable fields
    template: |
      let gender = .message.traits.gender ?? .message.context.traits.gender;
      gender = gender && (
                (gender in ["f", "F", "Female", "female", "FEMALE"] ? "f") ??
                (gender in ["m", "M", "Male", "male", "MALE"] ? "m") ??
                (gender in ["n", "N", "non-binary", "non binary", "Non-Binary", "Non Binary"] ? "n" : gender)
              );
      let userFields = .message.().({
        "em": {{{{$.getGenericPaths("email")}}}},
        "ph": {{{{$.getGenericPaths("phone")}}}},
        "ge": gender,
        "db": {{{{$.getGenericPaths("birthday")}}}},
        "ln": {{{{$.getGenericPaths("lastName")}}}},
        "fn": {{{{$.getGenericPaths("firstName")}}}},
        "ct": .traits.address.city ?? .context.traits.address.city,
        "st": .traits.address.state ?? .context.traits.address.state,
        "zp": .traits.address.zip ?? .context.traits.address.zip,
        "country": .traits.address.country ?? .context.traits.address.country,
        "hashed_maids": .context.device.advertisingId,
        "client_ip_address": .context.ip ?? .request_ip,
        "client_user_agent": .context.userAgent,
        "external_id": {{{{$.getGenericPaths("userId")}}}},
        "click_id": .properties.clickId,
        "partner_id": .traits.partnerId ?? .context.traits.partnerId ? $.convertToString(.traits.partnerId ?? .context.traits.partnerId) : undefined
      });
      !.destination.Config.sendExternalId ?  userFields = userFields{~["external_id"]} : null;
      userFields = $.removeUndefinedAndNullAndEmptyValues(userFields);
      .destination.Config.sendingUnHashedData ? 
        $.processUserPayload(userFields) :
        $.processHashedUserPayload(userFields, .message)
  - name: validateUserFields
    template: |
      const requiredFieldsCondition = $.outputs.userFields.().(.em || .hashed_maids || (.client_ip_address && .client_user_agent));
      $.assert(requiredFieldsCondition, "It is required at least one of em, hashed_maids or" +
            " pair of client_ip_address and client_user_agent")

  - name: ecomFields
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    steps:
      - name: customFields
        template: |
          const customFields = .message.().({
            "currency": .properties.currency,
              "value": .properties.value !== undefined ? $.convertToString(.properties.value) :
                       .properties.total !== undefined ? $.convertToString(.properties.total) :
                       .properties.revenue !== undefined ? $.convertToString(.properties.revenue) : undefined,
            "num_items": .properties.numOfItems && Number(.properties.numOfItems),
            "order_id": .properties.order_id,
            "search_string": .properties.query,
            "opt_out_type": .properties.optOutType,
            "content_name": .properties.contentName ? $.convertToString(.properties.contentName) : undefined,
            "content_category": .properties.contentCategory ? $.convertToString(.properties.contentCategory) : undefined,
            "content_brand": .properties.contentBrand ? $.convertToString(.properties.contentBrand) : undefined,
            "np": .properties.np ? $.convertToString(.properties.np) : undefined
          });
          $.removeUndefinedValues(customFields)

      - name: productFields
        condition: .message.properties.products
        description: When event contains multiple products
        template: |
          let products = .message.properties.products;
          {
            "num_items": $.sum(products.quantity.(Number(.))[]) || 0,
            "content_ids": products.(.product_id ?? .sku ?? .id)[],
            "contents": .message.properties@prop.products.({
              "quantity": Number(.quantity ?? prop.quantity ?? 1),
              "item_price":  $.convertToString(.price ?? prop.price),
              "item_name": $.convertToString(.name),
              "id": .product_id ?? .sku ? $.convertToString(.product_id ?? .sku) : undefined,
              "item_category": .category ? $.convertToString(.category) : undefined,
              "item_brand": .brand ? $.convertToString(.brand) : undefined
            })[]
          }
        else:
          name: singleProductFields
          template: |
            const props = .message.properties;
            const output = {
              "num_items": Number(props.quantity) || 0,
              "content_ids": (props.product_id ?? props.sku ?? props.id)[],
              "contents": {
                "quantity": Number(props.quantity) || 1,
                "item_price": props.price ? $.convertToString(props.price),
                "item_name": props.name ? $.convertToString(props.name),
                "id": props.product_id ?? props.sku ? $.convertToString(props.product_id ?? props.sku) : undefined,
                "item_category": props.category ? $.convertToString(props.category) : undefined,
                "item_brand": props.brand ? $.convertToString(props.brand) : undefined
              }[]
            };
      - name: combineAllEcomFields
        template: |
          {...$.outputs.ecomFields.productFields, ...$.outputs.ecomFields.customFields}
  - name: basePayload
    template: |
      const payload = $.outputs.commonFields;
      payload.user_data = $.outputs.userFields;
      $.outputs.ecomFields ? payload.custom_data = $.outputs.ecomFields;
      payload

  - name: eventNames
    description: Event names for page message type
    condition: $.outputs.messageType === {{$.EventType.PAGE}}
    template: |
      .message.category ? [ "view_category" ] : [ "page_visit" ]
    else:
      name: eventNamesForOthers
      template: |
        let event = .message.event ?? .message.name;
        $.validateEventName(event);
        let eventInLowerCase = event.toLowerCase();
        let eventNames = .destination.Config.eventsMapping.(){.from === event}.to[] ?? [];
        eventNames = $.convertToSnakeCase(eventNames);
        eventNames.length === 0 ? eventNames = $.ecomEventMaps.(){eventInLowerCase in .src}.dest[] ?? [];
        (eventNames.length === 0 && .destination.Config.sendAsCustomEvent) ? eventNames = ["custom"];
        eventNames.length === 0 ? eventNames = [event];
        eventNames;

  - name: payload
    template: |
      $.outputs.eventNames.().({...$.outputs.basePayload, event_name: .})[]

  - name: checkSendTestEventConfig
    description: |
      If sendTestEvent is enabled, we send test event to the destination
      ref: https://help.pinterest.com/en/business/article/track-conversions-with-the-conversions-api
    template: |
      ^.destination.Config.sendAsTestEvent ? {"test": true} : {}

  - name: buildResponseForBatchMode
    description: In batchMode we return payload directly
    condition: $.batchMode
    template: |
      $.outputs.payload
    onComplete: return

  - name: buildResponseForProcessTransformation
    description: build response using V3 API
    condition: $.outputs.apiVersion === {{$.API_VERSION.v3}}
    template: |
      $.outputs.payload.().({
        "body": {
          "JSON": .,
          "JSON_ARRAY": {},
          "XML": {},
          "FORM": {}
        },
        "version": "1",
        "type": "REST",
        "method": "POST",
        "endpoint": {{$.ENDPOINT}},
        "headers": {
          "Content-Type": "application/json"
        },
        "params": $.outputs.checkSendTestEventConfig,
        "files": {}
      })[]
    else:
      name: buildResponseForProcessTransformationV5
      description: build response using V5 API
      template: |
        $.outputs.payload.().({
          "body": {
            "JSON": .,
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": "POST",
          "endpoint": $.getV5EventsEndpoint(^.destination.Config.adAccountId),
          "headers": {
            "Content-Type": "application/json",
             Authorization: "Bearer " + ^.destination.Config.conversionToken,
          },
          "params": $.outputs.checkSendTestEventConfig,
          "files": {}
        })[]
