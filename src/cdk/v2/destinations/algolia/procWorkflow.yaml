bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../../../v0/destinations/algolia/util
  - path: ../../../../v0/destinations/algolia/config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: isDefinedAndNotNull
    path: ../../../../v0/util
  - path: ../../bindings/jsontemplate
  - path: '@rudderstack/integrations-lib'

steps:
  - name: validateInput
    template: |
      $.assert(.message.type, "message Type is not present. Aborting message.");
      $.assertConfig(.destination.Config.apiKey, "Invalid Api Key");
      $.assertConfig(.destination.Config.applicationId, "Invalid Application Id");
      $.assert(.message.type === {{$.EventType.TRACK}}, 
        "message type " + .message.type + " not supported")
      $.assert(.message.event, "event is required for track call")
      $.assert(typeof .message.event === "string", "event name should be a string")

  - name: preparePayload
    template: |
      $.assert(.message.properties.index, 'Missing required value from "properties.index"');
      let eventTypeMap = $.eventTypeMapping(.destination.Config);
      let event = .message.event.trim().toLowerCase();
      let eventType = .message.properties.eventType ?? eventTypeMap[event];
      let eventSubType = .message.properties.eventSubtype && eventType === 'conversion' && (.message.properties.eventSubtype in $.ALLOWED_EVENT_SUBTYPES) ? .message.properties.eventSubtype;
      $.assert(eventType, "eventType is mandatory for track call");
      let payload = .message.().({
        index: .properties.index,
        timestamp: .properties.timestamp,
        queryID: .properties.queryId || undefined,
        filters: .properties.filters,
        objectIDs: .properties.objectIds,
        positions: .properties.positions,
        value: $.isDefinedAndNotNull(.properties.currency) ? .properties.value,
        currency: .properties.currency,
        userToken: {{{{$.getGenericPaths("userId", "||")}}}},
        eventName: event,
        eventType: eventType,
        eventSubtype: eventSubType
      });
      $.context.payload = $.genericpayloadValidator(payload);

  - name: prepareObjectDataBlock
    condition: $.context.payload.eventType === "conversion" && $.isDefinedAndNotNull(^.message.properties.products) && Array.isArray(^.message.properties.products)
    description: |
      Populate list of objectData
    template: |
      const products = ^.message.properties.products
      products.($.removeUndefinedAndNullValues({
          "queryID" :  $.isDefinedAndNotNull(.queryID) ? String(.queryID) : null,
          "price": $.isDefinedAndNotNull(.price) && $.isDefinedAndNotNull(^.message.properties.currency) ? String(.price) : null,
          "quantity": $.isDefinedAndNotNull(.quantity)? Number(.quantity) : null,
          "discount": $.isDefinedAndNotNull(.discount) ? String(.discount) : null
      }))[]

  - name: populateProductsData
    condition: |
      .message.properties.products && 
      $.context.payload.eventName in ["product list viewed", "order completed"]
    steps:
      - name: populateForClickEvent
        condition: $.context.payload.eventType === "click"
        template: |
          const products = .message.properties.products;
          $.context.payload.objectIDs = ~r products.objectId;
          $.context.payload.positions = ~r products.position;
        else:
          name: populateForOtherEvents
          template: |
            const products = .message.properties.products;
            const objectIDs = ~r products.objectId;
            $.context.payload.objectIDs = Array.isArray(objectIDs) ? objectIDs[:20]:$.context.payload.objectIDs;
            $.context.payload.objectData = $.outputs.prepareObjectDataBlock
            $.validatePayload($.context.payload)

  - name: validateDestPayload
    template: |
      const filters = $.context.payload.filters;
      const objectIDs = $.context.payload.objectIDs;
      const objectData = $.context.payload.objectData;
      $.assert(!(filters && objectIDs), "event can't have both objectIds and filters at the same time.");
      $.assert(filters.length || objectIDs.length, "Either filters or objectIds is required and must be non empty.");

  - name: validatePayloadForClickEvent
    condition: $.context.payload.eventType === "click"
    template: |
      $.context.payload = $.clickPayloadValidator($.context.payload)

  - name: cleanPayload
    template: |
      $.context.payload = $.removeUndefinedAndNullValues($.context.payload);

  - name: buildResponse
    description: In batchMode we return payload directly
    condition: $.batchMode
    template: |
      $.context.payload
    else:
      name: buildResponseForProcessTransformation
      template: |
        {
          "body": {
            "JSON": {"events": $.context.payload[]},
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": "POST",
          "endpoint": {{$.ENDPOINT}},
          "headers": {
            "X-Algolia-Application-Id": .destination.Config.applicationId,
            "X-Algolia-API-Key": .destination.Config.apiKey
          },
          "params": {},
          "files": {}
        }
