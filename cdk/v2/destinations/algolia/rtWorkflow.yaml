bindings:
- path: ../../../../v0/destinations/algolia/config

steps:
  - name: validateInput
    template: |
      (
        $assert($type($) = "array" and $count($) > 0, "Invalid event array")
      )

  - name: prepareContext
    template:
      $setContext("batchMode", true)

  - name: transform
    externalWorkflow:
      path: ./procWorkflow.yaml
    loopOverInput: true

  - name: successfulEvents
    template: |
      $outputs.transform#$i.output.{
          "output": $,
          /* $$ refers to input (root of the document) */
          "destination": $$[$i].destination,
          "metadata": $$[$i].metadata
      } ~> $toArray
  - name: failedEvents
    template: |
      $outputs.transform#$i.error.{
        "metadata": $toArray($$[$i].metadata),
        "batched": false,
        "statusCode": status,
        "error": message
      } ~> $toArray
  - name: batchSuccessfulEvents
    description: Batches the successfulEvents
    template: |
      (
        $batches := $chunk($outputs.successfulEvents, $MAX_BATCH_SIZE);
        $batches.{
          "batchedRequest": {
            "body": {
              "JSON": {"events": output},
              "JSON_ARRAY": {},
              "XML": {},
              "FORM": {}
            },
            "version": "1",
            "type": "REST",
            "method": "POST",
            "endpoint": $ENDPOINT,
          "headers": $[0].destination.Config.{
            "X-Algolia-Application-Id": applicationId,
            "X-Algolia-API-Key": apiKey
          },
            "params": {},
            "files": {}
          },
          "metadata": metadata,
          "batched": true,
          "statusCode": 200,
          "destination": $[0].destination
        } ~> $toArray;
      )
  - name: finalPayload
    template: |
      $toArray($outputs.($append(batchSuccessfulEvents, failedEvents)))
