bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - name: getPropertyParams
  - path: ../../../../v0/destinations/webhook/utils
  - name: getFormattedPayload
  - path: ../../../../v0/destinations/webhook/utils
  - name: isFeatureEnabled
  - path: ../../../../v0/destinations/webhook/utils
  - name: getHashFromArray
    path: ../../../../v0/util
  - name: getIntegrationsObj
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message
    onComplete: return
  - name: validateInput
    template: |
      $.assertConfig(.destination.Config.webhookUrl, "Invalid URL in destination config");
  - name: deduceMethod
    template: |
      $.context.method = .destination.Config.webhookMethod ?? 'POST';
  - name: buildHeaderBlock
    template: |
      let defaultHeaders = $.context.method in ['POST', 'PUT', 'PATCH'] ? {"content-type": "application/json"} : {}
      let configHeaders = $.getHashFromArray(.destination.Config.headers)  
      let messageHeader = typeof .message.header === "object" ? Object.assign({}, ...Object.entries(.message.header).({[.[0]]:typeof .[1] === 'string' ? .[1] : JSON.stringify(.[1])})[]) : {}  
      $.context.finalHeaders = {
        ...defaultHeaders,
        ...configHeaders,
        ...messageHeader
      }
  - name: deduceEndPoint
    template: |
      let integrationsObjects = $.getIntegrationsObj(.message, "webhook");
      let defaultEndpoint = .destination.Config.webhookUrl;
      let messageAppendPath = .message.appendPath ?? integrationsObjects.appendPath ?? "";

      $.context.finalEndpoint = .message.fullPath ?? integrationsObjects.fullPath ?? defaultEndpoint;
      $.context.finalEndpoint = $.context.finalEndpoint + messageAppendPath;
  - name: prepareContext
    template: |
      $.context.params = {}
      $.context.payload = {}
  - name: prepareParams
    condition: $.context.method in ['GET', 'DELETE']
    template: |
      $.context.params = $.getPropertyParams(.message) ?? {}
  - name: prepareBody
    condition: $.context.method in ['POST', 'PUT', 'PATCH']
    template: |
      let ip = .message.context.ip ?? .message.request_ip;
      let payload = .message{~["fullPath", "appendPath", "header"]}
      ip && (
        payload.context = payload.context || {};
        payload.context.ip = ip;
      )
      $.context.payload = $.removeUndefinedAndNullValues(payload)

  - name: buildResponseForProcessTransformationWithBodyFormatting
    condition: await $.isFeatureEnabled(.metadata.workspaceId, 'dest_transformer_webhook_form_support')
    template: |
      const finalPayload = {
        body: {
          JSON: {},
          JSON_ARRAY: {},
          XML: {},
          FORM: {},
        },
        version: '1',
        userId: ^.message.anonymousId,
        type: 'REST',
        method: $.context.method,
        endpoint: $.context.finalEndpoint,
        headers: $.context.finalHeaders,
        params: $.context.params,
        files: {},
      };

      const formattedPayload = $.getFormattedPayload($.context.finalHeaders, $.context.payload);
      finalPayload.body[formattedPayload.contentTypeSimplified] = formattedPayload.payload || {};
      $.context.payload = finalPayload;
      $.context.payload

  - name: buildResponseForProcessTransformationWithDefaultBodyFormat
    condition: await $.isFeatureEnabled(.metadata.workspaceId, 'dest_transformer_webhook_form_support') !== true
    template: |
      $.context.payload.({
         "body": {
           "JSON": .,
           "JSON_ARRAY": {},
           "XML": {},
           "FORM": {}
         },
         "version": "1",
         "userId": ^.message.anonymousId,
         "type": "REST",
         "method": $.context.method,
         "endpoint": $.context.finalEndpoint,
         "headers": $.context.finalHeaders,
         "params": $.context.params,
         "files": {}
       })