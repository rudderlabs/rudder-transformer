bindings:
  - path: ../../../../v0/destinations/algolia/config
  - name: handleRtTfSingleEventError
    path: ../../../../v0/util/index
steps:
  - name: validateInput
    template: |
      $.assert(Array.isArray(^) && ^.length > 0, "Invalid event array")

  - name: transform
    externalWorkflow:
      path: ./procWorkflow.yaml
      bindings:
        - name: batchMode
          value: true
    loopOverInput: true

  - name: successfulEvents
    template: |
      $.outputs.transform#idx.output.({
        "output": .,
        "destination": ^[idx].destination,
        "metadata": ^[idx].metadata
      })[]
  - name: failedEvents
    template: |
      $.outputs.transform#idx.error.(
        $.handleRtTfSingleEventError(^[idx], .originalError ?? ., {})
      )[]

  - name: separateDontBatchEventForProxy
    template: |
      {
        dontBatchTrueEvents: $.outputs.successfulEvents{.metadata.dontBatch}[],
        dontBatchFalseEvents: $.outputs.successfulEvents{!.metadata.dontBatch}[]
      }

  - name: batchSuccessfulEventsDontBatchTrue
    description: Batches the successfulEvents
    template: |
      let batches = $.chunk($.outputs.separateDontBatchEventForProxy.dontBatchTrueEvents, 1);
      batches@batch.({
        "batchedRequest": {
          "body": {
            "JSON": {"events": ~r batch.output[]},
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": "POST",
          "endpoint": {{$.ENDPOINT}},
          "headers": batch[0].destination.Config.().({
            "X-Algolia-Application-Id": .applicationId,
            "X-Algolia-API-Key": .apiKey
          }),
          "params": {},
          "files": {}
        },
        "metadata": ~r batch.metadata[],
        "batched": true,
        "statusCode": 200,
        "destination": batch[0].destination
      })[];

  - name: batchSuccessfulEventsDontBatchFalse
    description: Batches the successfulEvents
    template: |
      let batches = $.chunk($.outputs.separateDontBatchEventForProxy.dontBatchFalseEvents, $.MAX_BATCH_SIZE);
      batches@batch.({
        "batchedRequest": {
          "body": {
            "JSON": {"events": ~r batch.output[]},
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": "POST",
          "endpoint": {{$.ENDPOINT}},
          "headers": batch[0].destination.Config.().({
            "X-Algolia-Application-Id": .applicationId,
            "X-Algolia-API-Key": .apiKey
          }),
          "params": {},
          "files": {}
        },
        "metadata": ~r batch.metadata[],
        "batched": true,
        "statusCode": 200,
        "destination": batch[0].destination
      })[];

  - name: combineSuccessfulEvents
    description: Combines the successfulEvents
    template: |
      [...$.outputs.batchSuccessfulEventsDontBatchFalse, ...$.outputs.batchSuccessfulEventsDontBatchTrue]

  - name: finalPayload
    template: |
      [...$.outputs.failedEvents, ...$.outputs.combineSuccessfulEvents]
