bindings:
  - name: EventType
    path: ../../../../constants
  - path: ./utils
    exportAll: true
  - name: isDefinedAndNotNull
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - name: getIntegrationsObj
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: handleHttpRequest
    path: ../../../../adapters/network

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message
    onComplete: return

  - name: messageType
    template: |
      .message.type.toLowerCase()

  - name: validateInput
    template: |
      let messageType = $.outputs.messageType
      $.assert(messageType, "message Type is not present. Aborting.")
      $.assert(messageType in {{$.EventType.([.IDENTIFY])}}, "message type " + messageType + " is not supported")
      $.assertConfig(.destination.Config.apiToken, "API Token is not present. Aborting")
      $.assertConfig(.destination.Config.domain, "Gladly domain is not present. Aborting")
      $.assertConfig(.destination.Config.userName, "User Name is not present. Aborting")

  - name: queryParams
    description: Build query params from payload to find user
    template: |
      const integrationsObj = $.getIntegrationsObj(.message, "gladly");
      $.getQueryParams(.message, integrationsObj)
      
  - name: findUser
    description: Fetch user details if exists
    condition: $.isDefinedAndNotNull($.outputs.queryParams) && $.isDefinedAndNotNull($.outputs.queryParams.key) && $.isDefinedAndNotNull($.outputs.queryParams.value)
    template: |
      const url = $.getEndpoint(.destination) + "?" + $.outputs.queryParams.key + "=" + $.outputs.queryParams.value
      const requestOptions = {
        headers: $.getHeaders(.destination)
      }
      const rawResponse = await $.handleHttpRequest("get", url, requestOptions)
      const processedResponse = rawResponse.processedResponse
      $.assertHttpResp(processedResponse, "Find User Lookup Failed due to " + JSON.stringify(processedResponse.response))
      processedResponse.response

  - name: preparePayload
    template: |
      $.context.payload = {
        name: .message.context.traits.name || .message.traits.name,
        image: .message.context.traits.avatar || .message.traits.avatar,
        address: .message.context.traits.address || .message.traits.address
      }
      $.context.payload.emails = $.formatField(.message, "email")
      $.context.payload.phones = $.formatField(.message, "phone")
      $.context.payload.customAttributes = $.getCustomAttributes(.message)
      $.context.payload.externalCustomerId = .message.context.externalId[0].id
      $.context.payload = $.removeUndefinedAndNullValues($.context.payload)

  - name: createUser
    description: Prepare create user payload
    condition: $.outputs.findUser.length === 0 || !$.isDefinedAndNotNull($.outputs.queryParams)
    template: |
      $.assert(.message.userId, "userId is required")
      $.context.payload.id = .message.userId
      $.context.method = "POST"
      $.context.endpoint = $.getEndpoint(.destination)
    
  - name: updateUser
    description: Prepare update user payload
    condition: $.outputs.findUser.length > 0
    template: |
      $.context.method = "PATCH"
      $.context.endpoint = $.getEndpoint(.destination) + "/" + .message.userId

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      const response = $.defaultRequestConfig()
      response.body.JSON = $.context.payload
      response.endpoint = $.context.endpoint
      response.method = $.context.method
      response.headers = $.getHeaders(.destination)
      response;
