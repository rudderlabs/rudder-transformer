name: Build Transformer Docker Image

on:
  workflow_call:
    inputs:
      build_tag:
        required: true
        type: string
      push_tags:
        required: true
        type: string
      img_tag:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      load_target:
        required: true
        type: string
      push_target:
        required: true
        type: string
      build_type:
        type: string
    secrets:
      DOCKERHUB_PROD_TOKEN:
        required: true

env:
  DOCKERHUB_USERNAME: rudderlabs

jobs:
  build-transformer-image-arm64:
    name: Build Transformer Docker Image ARM64
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PROD_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          target: ${{ inputs.load_target }}
          load: true
          tags: ${{ inputs.build_tag }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Run Tests
        run: |
          docker run ${{ inputs.build_tag }} npm run test:js:ci
          docker run ${{ inputs.build_tag }} npm run test:ts:ci

      - name: Build and Push Multi-platform Images
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          target: ${{ inputs.push_target }}
          push: true
          tags: ${{ inputs.push_tags }}-arm64
          platforms: |
            linux/arm64
          build-args: |
            version=${{ inputs.img_tag }}-arm64
            GIT_COMMIT_SHA=${{ github.sha }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  build-transformer-image-amd64:
    name: Build Transformer Docker Image AMD64
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PROD_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          target: ${{ inputs.load_target }}
          load: true
          tags: ${{ inputs.build_tag }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Run Tests
        run: |
          docker run ${{ inputs.build_tag }} npm run test:js:ci
          docker run ${{ inputs.build_tag }} npm run test:ts:ci

      - name: Build and Push Multi-platform Images
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          target: ${{ inputs.push_target }}
          push: true
          tags: ${{ inputs.push_tags }}-amd64
          platforms: |
            linux/amd64
          build-args: |
            version=${{ inputs.img_tag }}-amd64
            GIT_COMMIT_SHA=${{ github.sha }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  create-manifest:
    name: Create multi-arch manifest
    runs-on: ubuntu-latest
    needs: [build-transformer-image-amd64, build-transformer-image-arm64]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PROD_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create -t ${{ inputs.push_tags }} ${{ inputs.push_tags }}-amd64 ${{ inputs.push_tags }}-arm64

      - name: Create latest multi-arch manifest
        # To be triggered only for release/hotfix PR merges coming from `prepare-for-prod-dt-deploy.yaml`
        if: ${{ inputs.build_type == 'dt' }}
        run: |
          docker buildx imagetools create -t rudderstack/rudder-transformer:latest ${{ inputs.push_tags }}-amd64 ${{ inputs.push_tags }}-arm64

      - name: Create latest ut multi-arch manifest
        # To be triggered only for release/hotfix PR merges coming from `prepare-for-prod-ut-deploy.yaml`
        if: ${{ inputs.build_type == 'ut' }}
        run: |
          docker buildx imagetools create -t rudderstack/rudder-transformer:ut-latest ${{ inputs.push_tags }}-amd64 ${{ inputs.push_tags }}-arm64
