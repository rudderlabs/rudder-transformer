options:
  templateType: jsontemplate
bindings:
- path: ../../../../v0/destinations/algolia/config
- name: handleRtTfSingleEventError
  path: ../../../../v0/util/index

steps:
  - name: validateInput
    template: |
      $.assert(Array.isArray(^) && ^[].length > 0, "Invalid event array")

  - name: prepareContext
    template:
      $.context.batchMode = true

  - name: transform
    externalWorkflow:
      path: ./procWorkflow.yaml
    loopOverInput: true

  - name: successfulEvents
    template: |
      $.outputs.transform#idx.output.({
        "output": .,
        "destination": ^[idx].destination,
        "metadata": ^[idx].metadata
      })[]
  - name: failedEvents
    template: |
      $.outputs.transform#idx.error.(
        $.handleRtTfSingleEventError(^[idx], .originalError ?? ., "ALGOLIA")
      )[]
  - name: batchSuccessfulEvents
    description: Batches the successfulEvents
    template: |
        let batches = $.chunk($.outputs.successfulEvents, $.MAX_BATCH_SIZE);
        batches@batch.({
          "batchedRequest": {
            "body": {
              "JSON": {"events": batch.output[]},
              "JSON_ARRAY": {},
              "XML": {},
              "FORM": {}
            },
            "version": "1",
            "type": "REST",
            "method": "POST",
            "endpoint": $.ENDPOINT,
            "headers": batch[0].destination.Config.({
              "X-Algolia-Application-Id": .applicationId,
              "X-Algolia-API-Key": .apiKey
            }),
            "params": {},
            "files": {}
          },
          "metadata": batch.metadata[],
          "batched": true,
          "statusCode": 200,
          "destination": batch[0].destination
        })[];
  - name: finalPayload
    template: |
      $.outputs["failedEvents", "batchSuccessfulEvents"].flat()
