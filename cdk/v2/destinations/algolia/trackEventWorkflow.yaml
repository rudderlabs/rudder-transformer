options:
  templateType: jsontemplate
bindings:
  - path: ../../../../v0/destinations/algolia/util
  - path: ../../../../v0/destinations/algolia/config
  - path: ../../../../v0/util

steps:
  - name: validateInput
    template: |
      $.assert(.message.event, "event is required for track call")
  
  - name: preparePayload
    template: |
      let eventTypeMap = $.eventTypeMapping(.destination.Config);
      let event = .message.event.trim().toLowerCase();
      let eventType = .message.properties.eventType ?? eventTypeMap[event];
      $.assert(eventType, "eventType is mandatory for track call");
      let payload = $.constructPayload(.message, {{$.trackMapping}});
      payload.eventName = event;
      payload.eventType = eventType;
      $.context.payload = $.genericpayloadValidator(payload);      
  
  - name: populateProductsData
    condition: .message.properties.products && $.context.payload.eventName in ["product list viewed", "order completed"] 
    steps:
      - name: populateForClickEvent
        condition: $.context.payload.eventType === "click"
        template: |
            let validProducts = .message.properties.products{.objectId && .position}.()[:20];
            $.context.payload.objectIDs = validProducts.objectId;
            $.context.payload.positions = validProducts.position;
            $.context.payload = $.clickPayloadValidator($.context.payload)
        else:
          name: populateForOtherEvents
          template: |
            $.context.payload.objectIDs = .message.properties.products.objectId.()[:20];

  - name: validateDestPayload
    template: |
      let { filters, objectIDs } = $.context.payload{["filters", "objectIDs"]};
      $.assert(!(filters && objectIDs), "event can't have both objectIds and filters at the same time.");
      $.assert(filters || objectIDs, "Either filters or  objectIds is required.");

  - name: prepareResponsePayloadForBatch
    condition: $.context.batchMode
    template: |
      $.context.payload
    onComplete: return

  - name: prepareResponsePayload
    template: |
      {
        "body": {
          "JSON": {"events": $.context.payload[]},
          "JSON_ARRAY": {},
          "XML": {},
          "FORM": {}
        },
        "version": "1",
        "type": "REST",
        "method": "POST",
        "endpoint": {{$.ENDPOINT}},
        "headers": {
          "X-Algolia-Application-Id": .destination.Config.applicationId,
          "X-Algolia-API-Key": .destination.Config.apiKey
        },
        "params": {},
        "files": {}
      }
