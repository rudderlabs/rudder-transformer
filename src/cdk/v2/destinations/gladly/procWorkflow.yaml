bindings:
  - name: EventType
    path: ../../../../constants
  - path: ./utils
    exportAll: true
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: getDestinationExternalID
    path: ../../../../v0/util
  - name: httpPOST
    path: ../../../../adapters/network
  - name: processAxiosResponse
    path: ../../../../adapters/utils/networkUtils
  

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message
    onComplete: return

  - name: messageType
    template: |
      .message.type.toLowerCase()

  - name: validateInput
    template: |
      let messageType = $.outputs.messageType
      $.assert(messageType, "message Type is not present. Aborting.")
      $.assert(messageType in {{$.EventType.([.IDENTIFY])}}, "message type " + messageType + " is not supported")
      $.assertConfig(.destination.Config.apiToken, "API Token is not present. Aborting")
      $.assertConfig(.destination.Config.domain, "Gladly domain is not present. Aborting")
      $.assertConfig(.destination.Config.userName, "User Name is not present. Aborting")
      $.assert(.message.userId, "userId is required")

  - name: preparePayload
    template: |
      $.context.payload = {
        name: .message.traits.name || .message.context.traits.name,
        image: .message.traits.avatar || .message.context.traits.avatar,
        address: .message.traits.address || .message.context.traits.address
      }
      $.context.payload.address && typeof $.context.payload.address === "object" ?  $.context.payload.address =  JSON.stringify($.context.payload.address)
      $.context.payload.emails = $.formatField(.message, "email")
      $.context.payload.phones = $.formatField(.message, "phone")
      $.context.payload.customAttributes = $.getCustomAttributes(.message)
      $.context.payload.externalCustomerId = $.getDestinationExternalID(.message, "gladlyExternalCustomerId")
      $.context.payload = $.removeUndefinedAndNullValues($.context.payload)

  - name: createUser
    description: Prepare create user payload
    template: |
      const requestOptions = {
        headers: $.getHeaders(.destination)
      }
      const requestPayload = {...$.context.payload, id: .message.userId}
      const endpoint = $.getEndpoint(.destination)
      const rawResponse = await $.httpPOST(endpoint, requestPayload, requestOptions)
      const processedResponse = $.processAxiosResponse(rawResponse)
      processedResponse.status == 400 ? $.assertHttpResp(processedResponse, "Unable to create or update user due to " + JSON.stringify(processedResponse.response));
      processedResponse

  - name: buildResponseForProcessTransformation
    description: build response for updateUser
    template: |
      const response = $.defaultRequestConfig()
      response.body.JSON = $.removeUndefinedAndNullValues($.context.payload)
      response.endpoint = $.getEndpoint(.destination) + "/" + .message.userId
      response.method = "PATCH"
      response.headers = $.getHeaders(.destination)
      response.status = $.outputs.createUser.status
      response
