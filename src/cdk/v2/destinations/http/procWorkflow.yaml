bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - name: getHashFromArray
    path: ../../../../v0/util
  - name: getIntegrationsObj
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - name: isEmptyObject
    path: ../../../../v0/util
  - path: ./utils

steps:
  - name: validateInput
    template: |
      $.assertConfig(.destination.Config.apiUrl, "API URL is required. Aborting");
      $.assertConfig(!(.destination.Config.auth === "basicAuth" && !(.destination.Config.username)), "Username is required for Basic Authentication. Aborting");
      $.assertConfig(!(.destination.Config.auth === "bearerTokenAuth" && !(.destination.Config.bearerToken)), "Token is required for Bearer Token Authentication. Aborting");
      $.assertConfig(!(.destination.Config.auth === "apiKeyAuth" && !(.destination.Config.apiKeyName)), "API Key Name is required for API Key Authentication. Aborting");
            $.assertConfig(!(.destination.Config.auth === "apiKeyAuth" && !(.destination.Config.apiKeyValue)), "API Key Value is required for API Key Authentication. Aborting");

  - name: deduceMethod
    template: |
      $.context.method = .destination.Config.method ?? 'POST';

  - name: deduceBodyFormat
    template: |
      $.context.format = .destination.Config.format ?? 'JSON';

  - name: buildHeaders
    template: |
      const configAuthHeaders = $.getAuthHeaders(.destination.Config);
      const additionalConfigHeaders = $.getCustomMappings(.message, .destination.Config.headers);   
      $.context.headers = {
        ...configAuthHeaders,
        ...additionalConfigHeaders
      }

  - name: prepareParams
    template: |
      $.context.params = $.getCustomMappings(.message, .destination.Config.queryParams)

  - name: deduceEndPoint
    template: |
      $.context.endpoint = $.addPathParams(.message, .destination.Config.apiUrl);

  - name: prepareBody
    template: |
      const payload = $.getCustomMappings(.message, .destination.Config.propertiesMapping);
      $.context.payload = $.removeUndefinedAndNullValues($.excludeMappedFields(payload, .destination.Config.propertiesMapping))
      $.context.format === "XML" &&  !$.isEmptyObject($.context.payload) ?  $.context.payload = {payload: $.getXMLPayload($.context.payload)};

  - name: buildResponseForProcessTransformation
    template: |
      const response = $.defaultRequestConfig();
      $.context.format === "JSON" ? response.body.JSON = $.context.payload: response.body.XML = $.context.payload;
      response.endpoint = $.context.endpoint;
      response.headers = $.context.headers;
      response.method = $.context.method;
      response.params = $.context.params ?? {};
      response
