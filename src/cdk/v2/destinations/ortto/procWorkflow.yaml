bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - path: ./utils

steps:
  - name: validateInput
    template: |
      let messageType = .message.type;
      $.assert(.message.type, "message Type is not present. Aborting message.");
      $.assertConfig(.destination.Config.privateApiKey, "Private Api Key is not present");
      $.assertConfig(.destination.Config.instanceRegion, "Instance Region is not present");
      $.assert(messageType in {{$.EventType.([.IDENTIFY, .TRACK])}}, "message type " + messageType + " is not supported");
      $.assert(.message.().({{{{$.getGenericPaths("email")}}}}) || .message.().({{{{$.getGenericPaths("userId")}}}}), "Either of email  or userId is required. Aborting message.");

  - name: messageType
    template: |
      .message.type.toLowerCase()

  - name: validateInputForTrack
    description: Additional validation for Track events
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    template: |
      $.assert(.message.event, "event is not present. Aborting.")

  - name: commonFields
    description: |
      Builds common fields in destination payload.
    template: |
      let phone = .message.().({{{{$.getGenericPaths("phone")}}}});
      let commonFields = .message.().({
        "fields": { 
          "str::first": {{{{$.getGenericPaths("firstName")}}}}, 
          "str::last": {{{{$.getGenericPaths("lastName")}}}},
          "str::email": {{{{$.getGenericPaths("email")}}}},  
          "geo::city": {"name":{{{{$.getGenericPaths("city")}}}}},
          "geo::country": {"name":{{{{$.getGenericPaths("country")}}}}},
          "geo::region": {"name":{{{{$.getGenericPaths("region")}}}}},
          "str::postal": {{{{$.getGenericPaths("zipcode")}}}},
          "dtz::b": $.getBirthdayObj({{{{$.getGenericPaths("birthday")}}}}),
          "str::ei": {{{{$.getGenericPaths("userId")}}}},
          "str::language": .context.traits.language || .context.locale,
          "phn::phone": phone ? {"n": phone},
          "bol::gdpr": .context.traits.gdpr,
          "bol::p": .context.traits.emailConsent,
          "bol::sp": .context.traits.smsConsent,
          },
        "location": {"source_ip": .context.ip}
      });
      .destination.Config.orttoPersonAttributes@attribute.(
              const trimmedOrttoAttribute = attribute.orttoAttribute.trim().toLowerCase().replace(new RegExp('\\s+', 'g'),'-');
              commonFields.fields[$.fieldTypeMap[attribute.type]+":cm:"+trimmedOrttoAttribute] = $.originalInput.message.context.traits[attribute.rudderTraits]
            )[]
      commonFields.fields = $.removeUndefinedAndNullValues(commonFields.fields)
      $.removeUndefinedAndNullValues(commonFields)

  - name: prepareIdentifyPayload
    condition: $.outputs.messageType === {{$.EventType.IDENTIFY}}
    template: |
      const peopleObj = {
        "fields": $.outputs.commonFields.fields,
        "tags": .message.context.traits.tags || .message.traits.tags,
        "unset_tags": .message.context.traits.unset_tags || .message.traits.unset_tags
      }
      const identifyPayoad = {                                  
        "people":[peopleObj],
        "merge_by": ["str::ei", "str::email"]
      }
      $.removeUndefinedAndNullValues(identifyPayoad)

  - name: prepareTrackPayload
    condition: $.outputs.messageType === {{$.EventType.TRACK}}
    steps:
      - name: getTrimmedEvent
        template: |
          const event = .message.event;
          const customEvent = .destination.Config.orttoEventsMapping.{.rsEventName === event}.orttoEventName;
          $.assert(customEvent, "Event names is not mapped");
          "act:cm:"+customEvent.trim().toLowerCase().replace(new RegExp('\\s+', 'g'),'-');

      - name: getAttributes
        template: |
          let attributes = {};
          .destination.Config.orttoEventsMapping@event.eventProperties@prop.(
             attributes[$.fieldTypeMap[prop.type]+":cm:"+prop.orttoProperty.trim().toLowerCase().replace(new RegExp('\\s+', 'g'),'-')] = $.originalInput.message.properties[prop.rudderProperty]
           )
          $.removeUndefinedAndNullValues(attributes)

      - name: preparePayload
        template: |
          const activityObj = {
            "fields": $.outputs.commonFields.fields,
            "activity_id": $.outputs.prepareTrackPayload.getTrimmedEvent,
            "attributes": $.outputs.prepareTrackPayload.getAttributes,
            "location": {"source_ip": .message.context.ip}
          };
          {   
            "activities":[activityObj],
            "merge_by": ["str::ei", "str::email"]
          }

  - name: payload
    template: |
      $.outputs.messageType === {{$.EventType.IDENTIFY}} ? $.outputs.prepareIdentifyPayload : $.outputs.prepareTrackPayload

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      const response = $.defaultRequestConfig();
      const instanceRegion = $.originalInput.destination.Config.instanceRegion;
      response.body.JSON = $.outputs.payload;
      response.endpoint =  response.body.JSON.people? $.IDENTIFY_ENDPOINT[instanceRegion] : $.TRACK_ENDPOINT[instanceRegion];
      response.headers = {
          "X-Api-Key": .destination.Config.privateApiKey,
          "Content-Type": "application/json"
        };
      response;
